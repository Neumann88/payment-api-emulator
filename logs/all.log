{"level":"fatal","time":"10-06-2022,21:11:21","caller":"runtime/proc.go:250","message":"postgres connection failed, dial tcp 127.0.0.1:5432: connect: connection refused"}
{"level":"fatal","time":"10-06-2022,21:11:59","caller":"app/main.go:33","message":"postgres connection failed, dial tcp 127.0.0.1:5432: connect: connection refused"}
{"level":"fatal","time":"10-06-2022,21:37:23","caller":"app/main.go:33","message":"postgres connection failed, dial tcp 127.0.0.1:5432: connect: connection refused"}
{"level":"fatal","time":"10-06-2022,21:46:33","caller":"app/main.go:33","message":"postgres connection failed, pq: SSL is not enabled on the server"}
{"level":"fatal","time":"10-06-2022,21:46:41","caller":"app/main.go:33","message":"postgres connection failed, pq: SSL is not enabled on the server"}
{"level":"fatal","time":"10-06-2022,21:47:12","caller":"app/main.go:34","message":"postgres connection failed, pq: SSL is not enabled on the server"}
{"level":"fatal","time":"10-06-2022,21:48:16","caller":"app/main.go:34","message":"postgres connection failed, pq: SSL is not enabled on the server"}
{"level":"fatal","time":"10-06-2022,21:50:35","caller":"app/main.go:34","message":"postgres connection failed, pq: SSL is not enabled on the server"}
{"level":"info","time":"10-06-2022,21:51:53","caller":"migrate/migrate.go:22","message":"first .: file does not exist"}
{"level":"info","time":"10-06-2022,21:51:53","caller":"app/main.go:60","message":"http server created and started at http://localhost:8080"}
{"level":"info","time":"10-06-2022,21:52:19","caller":"app/main.go:68","message":"app - run - signal: interrupt"}
{"level":"error","time":"10-06-2022,21:52:19","caller":"app/main.go:76","message":"app - run - httpServer.Shutdown: context deadline exceeded"}
{"level":"fatal","time":"10-06-2022,23:40:07","caller":"migrate/migrate.go:22","message":"migration failed: column \"email\" does not exist in line 0: CREATE TYPE valid_status AS ENUM('new', 'success', 'failure', 'error');\nCREATE TYPE valid_currency AS ENUM('usd', 'eur', 'rub');\n\nCREATE TABLE IF NOT EXISTS transactions (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  user_email VARCHAR(20) NOT NULL,\n  amount NUMERIC(10, 2) NOT NULL CHECK(amount > 0),\n  currency valid_currency NOT NULL,\n  created_at TIMESTAMP NOT NULL DEFAULT current_timestamp, -- создается один раз и не изменяется\n  updated_at TIMESTAMP NOT NULL DEFAULT current_timestamp, -- изменяется при обновлении\n  transaction_status valid_status NOT NULL DEFAULT 'new'\n);\n\nCREATE INDEX ON transactions(email);\nCREATE INDEX ON transactions(user_id);\n\ninsert into transactions(user_id, user_email, amount, currency) values (1, 'email1', 100.5, 'usd');\nupdate transactions set transaction_status = 'error', updated_at = current_timestamp where user_id = 1 (details: pq: column \"email\" does not exist)"}
{"level":"fatal","time":"10-06-2022,23:41:38","caller":"migrate/migrate.go:22","message":"migration failed: column \"email\" does not exist in line 0: CREATE TYPE valid_status AS ENUM('new', 'success', 'failure', 'error');\nCREATE TYPE valid_currency AS ENUM('usd', 'eur', 'rub');\n\nCREATE TABLE IF NOT EXISTS transactions (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  user_email VARCHAR(20) NOT NULL,\n  amount NUMERIC(10, 2) NOT NULL CHECK(amount > 0),\n  currency valid_currency NOT NULL,\n  created_at TIMESTAMP NOT NULL DEFAULT current_timestamp, -- создается один раз и не изменяется\n  updated_at TIMESTAMP NOT NULL DEFAULT current_timestamp, -- изменяется при обновлении\n  transaction_status valid_status NOT NULL DEFAULT 'new'\n);\n\nCREATE INDEX ON transactions(email);\nCREATE INDEX ON transactions(user_id);\n\ninsert into transactions(user_id, user_email, amount, currency) values (1, 'email1', 100.5, 'usd');\nupdate transactions set transaction_status = 'error', updated_at = current_timestamp where user_id = 1; (details: pq: column \"email\" does not exist)"}
{"level":"info","time":"10-06-2022,23:42:20","caller":"app/main.go:59","message":"http server created and started at http://localhost:8080"}
{"level":"info","time":"10-06-2022,23:45:19","caller":"app/main.go:67","message":"app - run - signal: interrupt"}
{"level":"error","time":"10-06-2022,23:45:19","caller":"app/main.go:75","message":"app - run - httpServer.Shutdown: context deadline exceeded"}
{"level":"info","time":"10-06-2022,23:45:33","caller":"app/main.go:59","message":"http server created and started at http://localhost:8080"}
{"level":"info","time":"10-06-2022,23:53:19","caller":"app/main.go:67","message":"app - run - signal: interrupt"}
{"level":"error","time":"10-06-2022,23:53:19","caller":"app/main.go:75","message":"app - run - httpServer.Shutdown: context deadline exceeded"}
{"level":"fatal","time":"10-06-2022,23:53:30","caller":"migrate/migrate.go:22","message":"migration failed: syntax error at or near \"with\" (column 28) in line 10: CREATE TYPE valid_status AS ENUM('new', 'success', 'failure', 'error');\nCREATE TYPE valid_currency AS ENUM('usd', 'eur', 'rub');\n\nCREATE TABLE IF NOT EXISTS transactions (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  user_email VARCHAR(20) NOT NULL,\n  amount NUMERIC(10, 2) NOT NULL CHECK(amount > 0),\n  currency valid_currency NOT NULL,\n  created_at TIMESTAMP NOT with time zone NULL DEFAULT statement_timestamp( ) , -- создается один раз и не изменяется\n  updated_at TIMESTAMP NOT NULL DEFAULT NOW(), -- изменяется при обновлении\n  transaction_status valid_status NOT NULL DEFAULT 'new'\n);\n\nCREATE INDEX ON transactions(user_email);\nCREATE INDEX ON transactions(user_id);\n\ninsert into transactions(user_id, user_email, amount, currency) values (1, 'email1', 100.5, 'usd');\nupdate transactions set transaction_status = 'error', updated_at = current_timestamp where user_id = 1; (details: pq: syntax error at or near \"with\")"}
{"level":"fatal","time":"10-06-2022,23:53:53","caller":"migrate/migrate.go:22","message":"migration failed: syntax error at or near \"with\" (column 33) in line 10: CREATE TYPE valid_status AS ENUM('new', 'success', 'failure', 'error');\nCREATE TYPE valid_currency AS ENUM('usd', 'eur', 'rub');\n\nCREATE TABLE IF NOT EXISTS transactions (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  user_email VARCHAR(20) NOT NULL,\n  amount NUMERIC(10, 2) NOT NULL CHECK(amount > 0),\n  currency valid_currency NOT NULL,\n  created_at TIMESTAMP NOT NULL with time zone DEFAULT statement_timestamp( ) , -- создается один раз и не изменяется\n  updated_at TIMESTAMP NOT NULL DEFAULT NOW(), -- изменяется при обновлении\n  transaction_status valid_status NOT NULL DEFAULT 'new'\n);\n\nCREATE INDEX ON transactions(user_email);\nCREATE INDEX ON transactions(user_id);\n\ninsert into transactions(user_id, user_email, amount, currency) values (1, 'email1', 100.5, 'usd');\nupdate transactions set transaction_status = 'error', updated_at = current_timestamp where user_id = 1; (details: pq: syntax error at or near \"with\")"}
{"level":"info","time":"10-06-2022,23:54:51","caller":"app/main.go:59","message":"http server created and started at http://localhost:8080"}
{"level":"info","time":"11-06-2022,00:07:02","caller":"app/main.go:67","message":"app - run - signal: interrupt"}
{"level":"error","time":"11-06-2022,00:07:02","caller":"app/main.go:75","message":"app - run - httpServer.Shutdown: context deadline exceeded"}
{"level":"fatal","time":"11-06-2022,00:07:14","caller":"migrate/migrate.go:22","message":"migration failed: function moddatetime() does not exist in line 0: CREATE TYPE valid_status AS ENUM('new', 'success', 'failure', 'error');\nCREATE TYPE valid_currency AS ENUM('usd', 'eur', 'rub');\n\nCREATE TABLE IF NOT EXISTS transactions (\n  id SERIAL PRIMARY KEY,\n  user_id INT NOT NULL,\n  user_email VARCHAR(20) NOT NULL,\n  amount NUMERIC(10, 2) NOT NULL CHECK(amount > 0),\n  currency valid_currency NOT NULL,\n  created_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n  updated_at TIMESTAMP WITH TIME ZONE NOT NULL DEFAULT NOW(),\n  transaction_status valid_status NOT NULL DEFAULT 'new'\n);\n\nCREATE INDEX ON transactions(user_email);\nCREATE INDEX ON transactions(user_id);\n\nCREATE TRIGGER created_at_moddatetime\n    BEFORE UPDATE ON transactions\n    FOR EACH ROW\n    EXECUTE PROCEDURE moddatetime(created_at);\n\ninsert into transactions(user_id, user_email, amount, currency) values (1, 'email1', 100.5, 'usd');\nupdate transactions set transaction_status = 'error' where user_id = 1; (details: pq: function moddatetime() does not exist)"}
{"level":"info","time":"11-06-2022,00:10:15","caller":"app/main.go:59","message":"http server created and started at http://localhost:8080"}
{"level":"info","time":"11-06-2022,00:13:50","caller":"app/main.go:67","message":"app - run - signal: interrupt"}
{"level":"error","time":"11-06-2022,00:13:50","caller":"app/main.go:75","message":"app - run - httpServer.Shutdown: context deadline exceeded"}
